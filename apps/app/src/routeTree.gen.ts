/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as VerifiedRouteImport } from './routes/verified'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as MainRouteImport } from './routes/_main'
import { Route as MainIndexRouteImport } from './routes/_main/index'
import { Route as ProjectsNewRouteImport } from './routes/projects/new'
import { Route as MainProjectsIdRouteImport } from './routes/_main/projects/$id'
import { Route as MainProjectsIdIndexRouteImport } from './routes/_main/projects/$id.index'
import { Route as MainProjectsIdSettingsRouteImport } from './routes/_main/projects/$id.settings'
import { Route as MainProjectsIdProspectsRouteImport } from './routes/_main/projects/$id.prospects'
import { ServerRoute as ApiWaitlistServerRouteImport } from './routes/api/waitlist'
import { ServerRoute as ApiVerifyServerRouteImport } from './routes/api/verify'
import { ServerRoute as ApiInngestServerRouteImport } from './routes/api/inngest'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'
import { ServerRoute as ApiAccessEmailServerRouteImport } from './routes/api/access.$email'

const rootServerRouteImport = createServerRootRoute()

const VerifiedRoute = VerifiedRouteImport.update({
  id: '/verified',
  path: '/verified',
  getParentRoute: () => rootRouteImport,
} as any)
const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const MainIndexRoute = MainIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)
const ProjectsNewRoute = ProjectsNewRouteImport.update({
  id: '/projects/new',
  path: '/projects/new',
  getParentRoute: () => rootRouteImport,
} as any)
const MainProjectsIdRoute = MainProjectsIdRouteImport.update({
  id: '/projects/$id',
  path: '/projects/$id',
  getParentRoute: () => MainRoute,
} as any)
const MainProjectsIdIndexRoute = MainProjectsIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainProjectsIdRoute,
} as any)
const MainProjectsIdSettingsRoute = MainProjectsIdSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => MainProjectsIdRoute,
} as any)
const MainProjectsIdProspectsRoute = MainProjectsIdProspectsRouteImport.update({
  id: '/prospects',
  path: '/prospects',
  getParentRoute: () => MainProjectsIdRoute,
} as any)
const ApiWaitlistServerRoute = ApiWaitlistServerRouteImport.update({
  id: '/api/waitlist',
  path: '/api/waitlist',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiVerifyServerRoute = ApiVerifyServerRouteImport.update({
  id: '/api/verify',
  path: '/api/verify',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiInngestServerRoute = ApiInngestServerRouteImport.update({
  id: '/api/inngest',
  path: '/api/inngest',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAccessEmailServerRoute = ApiAccessEmailServerRouteImport.update({
  id: '/api/access/$email',
  path: '/api/access/$email',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/sign-up': typeof SignUpRoute
  '/verified': typeof VerifiedRoute
  '/projects/new': typeof ProjectsNewRoute
  '/': typeof MainIndexRoute
  '/projects/$id': typeof MainProjectsIdRouteWithChildren
  '/projects/$id/prospects': typeof MainProjectsIdProspectsRoute
  '/projects/$id/settings': typeof MainProjectsIdSettingsRoute
  '/projects/$id/': typeof MainProjectsIdIndexRoute
}
export interface FileRoutesByTo {
  '/sign-up': typeof SignUpRoute
  '/verified': typeof VerifiedRoute
  '/projects/new': typeof ProjectsNewRoute
  '/': typeof MainIndexRoute
  '/projects/$id/prospects': typeof MainProjectsIdProspectsRoute
  '/projects/$id/settings': typeof MainProjectsIdSettingsRoute
  '/projects/$id': typeof MainProjectsIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_main': typeof MainRouteWithChildren
  '/sign-up': typeof SignUpRoute
  '/verified': typeof VerifiedRoute
  '/projects/new': typeof ProjectsNewRoute
  '/_main/': typeof MainIndexRoute
  '/_main/projects/$id': typeof MainProjectsIdRouteWithChildren
  '/_main/projects/$id/prospects': typeof MainProjectsIdProspectsRoute
  '/_main/projects/$id/settings': typeof MainProjectsIdSettingsRoute
  '/_main/projects/$id/': typeof MainProjectsIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/sign-up'
    | '/verified'
    | '/projects/new'
    | '/'
    | '/projects/$id'
    | '/projects/$id/prospects'
    | '/projects/$id/settings'
    | '/projects/$id/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/sign-up'
    | '/verified'
    | '/projects/new'
    | '/'
    | '/projects/$id/prospects'
    | '/projects/$id/settings'
    | '/projects/$id'
  id:
    | '__root__'
    | '/_main'
    | '/sign-up'
    | '/verified'
    | '/projects/new'
    | '/_main/'
    | '/_main/projects/$id'
    | '/_main/projects/$id/prospects'
    | '/_main/projects/$id/settings'
    | '/_main/projects/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
  SignUpRoute: typeof SignUpRoute
  VerifiedRoute: typeof VerifiedRoute
  ProjectsNewRoute: typeof ProjectsNewRoute
}
export interface FileServerRoutesByFullPath {
  '/api/inngest': typeof ApiInngestServerRoute
  '/api/verify': typeof ApiVerifyServerRoute
  '/api/waitlist': typeof ApiWaitlistServerRoute
  '/api/access/$email': typeof ApiAccessEmailServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/inngest': typeof ApiInngestServerRoute
  '/api/verify': typeof ApiVerifyServerRoute
  '/api/waitlist': typeof ApiWaitlistServerRoute
  '/api/access/$email': typeof ApiAccessEmailServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/inngest': typeof ApiInngestServerRoute
  '/api/verify': typeof ApiVerifyServerRoute
  '/api/waitlist': typeof ApiWaitlistServerRoute
  '/api/access/$email': typeof ApiAccessEmailServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/inngest'
    | '/api/verify'
    | '/api/waitlist'
    | '/api/access/$email'
    | '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/inngest'
    | '/api/verify'
    | '/api/waitlist'
    | '/api/access/$email'
    | '/api/auth/$'
  id:
    | '__root__'
    | '/api/inngest'
    | '/api/verify'
    | '/api/waitlist'
    | '/api/access/$email'
    | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiInngestServerRoute: typeof ApiInngestServerRoute
  ApiVerifyServerRoute: typeof ApiVerifyServerRoute
  ApiWaitlistServerRoute: typeof ApiWaitlistServerRoute
  ApiAccessEmailServerRoute: typeof ApiAccessEmailServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/verified': {
      id: '/verified'
      path: '/verified'
      fullPath: '/verified'
      preLoaderRoute: typeof VerifiedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/projects/new': {
      id: '/projects/new'
      path: '/projects/new'
      fullPath: '/projects/new'
      preLoaderRoute: typeof ProjectsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/projects/$id': {
      id: '/_main/projects/$id'
      path: '/projects/$id'
      fullPath: '/projects/$id'
      preLoaderRoute: typeof MainProjectsIdRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/projects/$id/': {
      id: '/_main/projects/$id/'
      path: '/'
      fullPath: '/projects/$id/'
      preLoaderRoute: typeof MainProjectsIdIndexRouteImport
      parentRoute: typeof MainProjectsIdRoute
    }
    '/_main/projects/$id/settings': {
      id: '/_main/projects/$id/settings'
      path: '/settings'
      fullPath: '/projects/$id/settings'
      preLoaderRoute: typeof MainProjectsIdSettingsRouteImport
      parentRoute: typeof MainProjectsIdRoute
    }
    '/_main/projects/$id/prospects': {
      id: '/_main/projects/$id/prospects'
      path: '/prospects'
      fullPath: '/projects/$id/prospects'
      preLoaderRoute: typeof MainProjectsIdProspectsRouteImport
      parentRoute: typeof MainProjectsIdRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/waitlist': {
      id: '/api/waitlist'
      path: '/api/waitlist'
      fullPath: '/api/waitlist'
      preLoaderRoute: typeof ApiWaitlistServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/verify': {
      id: '/api/verify'
      path: '/api/verify'
      fullPath: '/api/verify'
      preLoaderRoute: typeof ApiVerifyServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/inngest': {
      id: '/api/inngest'
      path: '/api/inngest'
      fullPath: '/api/inngest'
      preLoaderRoute: typeof ApiInngestServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/access/$email': {
      id: '/api/access/$email'
      path: '/api/access/$email'
      fullPath: '/api/access/$email'
      preLoaderRoute: typeof ApiAccessEmailServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface MainProjectsIdRouteChildren {
  MainProjectsIdProspectsRoute: typeof MainProjectsIdProspectsRoute
  MainProjectsIdSettingsRoute: typeof MainProjectsIdSettingsRoute
  MainProjectsIdIndexRoute: typeof MainProjectsIdIndexRoute
}

const MainProjectsIdRouteChildren: MainProjectsIdRouteChildren = {
  MainProjectsIdProspectsRoute: MainProjectsIdProspectsRoute,
  MainProjectsIdSettingsRoute: MainProjectsIdSettingsRoute,
  MainProjectsIdIndexRoute: MainProjectsIdIndexRoute,
}

const MainProjectsIdRouteWithChildren = MainProjectsIdRoute._addFileChildren(
  MainProjectsIdRouteChildren,
)

interface MainRouteChildren {
  MainIndexRoute: typeof MainIndexRoute
  MainProjectsIdRoute: typeof MainProjectsIdRouteWithChildren
}

const MainRouteChildren: MainRouteChildren = {
  MainIndexRoute: MainIndexRoute,
  MainProjectsIdRoute: MainProjectsIdRouteWithChildren,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
  SignUpRoute: SignUpRoute,
  VerifiedRoute: VerifiedRoute,
  ProjectsNewRoute: ProjectsNewRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiInngestServerRoute: ApiInngestServerRoute,
  ApiVerifyServerRoute: ApiVerifyServerRoute,
  ApiWaitlistServerRoute: ApiWaitlistServerRoute,
  ApiAccessEmailServerRoute: ApiAccessEmailServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
